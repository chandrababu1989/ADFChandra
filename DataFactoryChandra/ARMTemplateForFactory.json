{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataFactoryChandra"
		},
		"InputLinkService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'InputLinkService'"
		},
		"OutputLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OutputLinkedService'"
		},
		"OutputLinkedServiceWithTrigger_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OutputLinkedServiceWithTrigger'"
		},
		"EventBasedTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/609ef752-4017-4730-9b67-54060914654f/resourceGroups/RG_Chandra/providers/Microsoft.Storage/storageAccounts/chandrastotageaccount"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Condition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter the Items",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ListOfValues",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(),5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Rotating Items",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter the Items",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter the Items').output",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "AzureBobSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Dynamic_DataSet_basedForeach",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ListOfValues": {
						"type": "array",
						"defaultValue": [
							2,
							4,
							6,
							8,
							7,
							5,
							3,
							1
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T05:14:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBobSource')]",
				"[concat(variables('factoryId'), '/datasets/Dynamic_DataSet_basedForeach')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowBasePipiline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Base Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Base Data Flow example",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeSource": {},
									"DepartmentSource": {},
									"OutputSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-17T12:52:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Base Data Flow example')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete the files",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Output folder deletion",
								"value": "Deleted all files"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlobDeleteDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "OutputLinkedService",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-10T10:59:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlobDeleteDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/OutputLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute Acitvity Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Activity",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PipelineText",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-11T12:12:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PipelineText')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/For Each')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Rotating Input",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ListOfItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "AzureBobSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Dynamic_DataSet_basedForeach",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ListOfItems": {
						"type": "array",
						"defaultValue": [
							"Output1",
							"Output2"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T00:32:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBobSource')]",
				"[concat(variables('factoryId'), '/datasets/Dynamic_DataSet_basedForeach')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineText')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data transform using azure bob with binary format ",
				"activities": [
					{
						"name": "Copy Data from text file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureBobSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBobSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-03T10:23:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBobSource')]",
				"[concat(variables('factoryId'), '/datasets/AzureBobSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineTrigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data transform using azure bob with binary format ",
				"activities": [
					{
						"name": "Copy Data from text file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureBobSourceWithTrigger",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBobSinkWirhTrigger",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-04T00:41:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBobSourceWithTrigger')]",
				"[concat(variables('factoryId'), '/datasets/AzureBobSinkWirhTrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobDeleteDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "chandracontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBobSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dataoutput2.0",
						"folderPath": "output",
						"container": "chandracontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBobSinkWirhTrigger')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputLinkedServiceWithTrigger",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dataTrigger",
						"folderPath": "outputTrigger",
						"container": "chandracontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputLinkedServiceWithTrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBobSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Azure bob source ",
				"linkedServiceName": {
					"referenceName": "InputLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Data 2.0",
						"folderPath": "Input",
						"container": "chandracontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBobSourceWithTrigger')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dataoutput2.0",
						"folderPath": "output",
						"container": "chandracontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DepartmentDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Department.csv",
						"folderPath": "Data Flow",
						"container": "chandracontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DepartmentId",
						"type": "String"
					},
					{
						"name": "DepartmentName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic_DataSet_basedForeach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "chandracontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.csv",
						"folderPath": "Data Flow",
						"container": "chandracontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeId",
						"type": "String"
					},
					{
						"name": "EmployeeName",
						"type": "String"
					},
					{
						"name": "DepartmentId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputSinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputLinkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Merge",
						"folderPath": "Data Flow",
						"container": "chandracontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DepartmentId",
						"type": "String"
					},
					{
						"name": "DepartmentName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputLinkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputLinkService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('InputLinkService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('OutputLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputLinkedServiceWithTrigger')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Event trigger is mapped",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('OutputLinkedServiceWithTrigger_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventBasedTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PipelineTrigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/chandracontainer/blobs/output/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EventBasedTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PipelineTrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Base Data Flow example')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeDataSet",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentDataset",
								"type": "DatasetReference"
							},
							"name": "DepartmentSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutputSinkDataset",
								"type": "DatasetReference"
							},
							"name": "OutputSink"
						}
					],
					"transformations": [
						{
							"name": "JoinEmployeeDepartment"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeId as string,",
						"          EmployeeName as string,",
						"          DepartmentId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          DepartmentId as string,",
						"          DepartmentName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepartmentSource",
						"EmployeeSource, DepartmentSource join(EmployeeSource@DepartmentId == DepartmentSource@DepartmentId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEmployeeDepartment",
						"JoinEmployeeDepartment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DepartmentId as string,",
						"          DepartmentName as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeeId,",
						"          EmployeeName,",
						"          DepartmentName",
						"     )) ~> OutputSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeDataSet')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentDataset')]",
				"[concat(variables('factoryId'), '/datasets/OutputSinkDataset')]"
			]
		}
	]
}